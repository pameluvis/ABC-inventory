# -*- coding: utf-8 -*-
"""InventarioABC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wrc8RIxsvLNw6ll883BgxEn_aDcJffUh

**INVENTARIOS ABC
**

Pedir el nombre del archivo cvs
"""

nombre = input("ingresa el nombre de tu archivo: ")

"""Leer el archivo csv"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import PercentFormatter

dataf=pd.read_csv(nombre, header=0)
dfo = pd.DataFrame(dataf)

"""Seleccionar las columnas item, nombre del producto, valor_articulo y Unidades_consumidas"""

df = dfo.iloc[:, [0, 1, 5, 10]]

"""Calcular el costo de las unidades consumidas, el resultado se almacenará en una nueva columna 'CostoConsumo'"""

df['CostoConsumo'] = df['Valor_articulo'] * df['Unidades_consumidas']

"""Ordenamos de mayor a menor según el costo del consumo"""

datos = df.sort_values(by='CostoConsumo',ascending=False)
print(datos)

"""Obtenemos el total del costo del consumo"""

suma = datos['CostoConsumo'].sum()
print(suma)

"""Para cada fila obtenemos el porcentaje del costo de consumo"""

datos['porcentajeCosto'] = (datos['CostoConsumo']*100)/suma
print(datos)

"""Verificamos que sea el 100 %."""

sumaPor = datos['porcentajeCosto'].sum()
print(sumaPor)

"""En una nueva columna llamada 'porcentaje acumulado' se obtendrá el porcentaje acumulado hasta llegar al 100%"""

acumulado = datos.iloc[0, 5]
datos['porcentajeAcumulado'] = 0

datos.iloc[0,6] = acumulado

for i in range(1, len(datos)):
    datos.iloc[i,6] = datos.iloc[i-1,6] + datos.iloc[i,5]

print(datos)

"""Usando la información de la columna CostoConsumo obtendremos una gráfica de barras, con la información de 'porcentajeAcumulado' se obtene la linea."""

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.set_title("Diagrama de pereto-")
ax.bar(datos["ProductName"], datos["CostoConsumo"], color="C0")

ax2 = ax.twinx()
ax2.plot(datos["ProductName"], datos['porcentajeAcumulado'], color="C1", marker ="D", ms=5)
ax2.yaxis.set_major_formatter(PercentFormatter())

ax.tick_params(axis="y", colors="C0")
ax2.tick_params(axis="y", colors="C1")

ax.set_xticklabels(datos["ProductName"], rotation=90)
plt.show()

"""**Rotación de inventario**

seleccionamos las columnas a usar, en este caso item, ProductName y Unidades_Consumidas
"""

datos1 = dfo.iloc[:, [0, 1, 10]]

"""Ordenamos de mayor a menor para saber cual es el producto con más rotación del inventario.

"""

datos1 = datos1.sort_values(by='Unidades_consumidas',ascending=False)
print(datos1)

"""obtenemos el total de productos consumidos"""

sumaCon = datos1['Unidades_consumidas'].sum()
print(sumaCon)

"""Obtenemos el porcentaje de consumo y se almacenará en la nueva columna 'porcentajeConsumo'"""

datos1['porcentajeConsumo'] = (datos1['Unidades_consumidas']*100)/sumaCon
print(datos1)

"""Verificamos qur se haya obtenido el 100%.

"""

sumaPor = datos1['porcentajeConsumo'].sum()
print(sumaPor)

"""obtenemos el porcentaje acumulado."""

acumulado = datos1.iloc[0, 3]
datos1['porcentajeAcumulado'] = 0

datos1.iloc[0,4] = acumulado

for i in range(1, len(datos)):
    datos1.iloc[i,4] = datos1.iloc[i-1,4] + datos1.iloc[i,3]

print(datos1)

graficas = [[datos['porcentajeAcumulado']], [datos1['porcentajeAcumulado']]]

dfg = pd.DataFrame(datos1)
print(dfg)

"""obtenemos la gráfica de peretto.
usamos la frecuencia absoluta (unidades consumidas) para las barras y el porcentaje acumulado para la línea.

"""

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.set_title("Diagrama de pereto-")
ax.bar(datos1["ProductName"], datos1["Unidades_consumidas"], color="C0")

ax2 = ax.twinx()
ax2.plot(datos1["ProductName"], datos1['porcentajeAcumulado'], color="C1", marker ="D", ms=5)
ax2.yaxis.set_major_formatter(PercentFormatter())

ax.tick_params(axis="y", colors="C0")
ax2.tick_params(axis="y", colors="C1")

ax.set_xticklabels(datos1["ProductName"], rotation=90)
plt.show()